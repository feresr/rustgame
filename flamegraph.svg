<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="35521"><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.02%)</title><rect x="0.0056%" y="293" width="0.0197%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="7"/><text x="0.2556%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (17 samples, 0.05%)</title><rect x="0.0056%" y="309" width="0.0479%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="17"/><text x="0.2556%" y="319.50"></text></g><g><title>libdispatch.dylib`dispatch_mig_server (9 samples, 0.03%)</title><rect x="0.0282%" y="293" width="0.0253%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="9"/><text x="0.2782%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (8 samples, 0.02%)</title><rect x="0.0310%" y="277" width="0.0225%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="8"/><text x="0.2810%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (8 samples, 0.02%)</title><rect x="0.0310%" y="261" width="0.0225%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="8"/><text x="0.2810%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (8 samples, 0.02%)</title><rect x="0.0310%" y="245" width="0.0225%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="8"/><text x="0.2810%" y="255.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_latch_and_call (19 samples, 0.05%)</title><rect x="0.0056%" y="341" width="0.0535%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="19"/><text x="0.2556%" y="351.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (19 samples, 0.05%)</title><rect x="0.0056%" y="325" width="0.0535%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="19"/><text x="0.2556%" y="335.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (20 samples, 0.06%)</title><rect x="0.0056%" y="357" width="0.0563%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="20"/><text x="0.2556%" y="367.50"></text></g><g><title>libsystem_blocks.dylib`_call_dispose_helpers_excp (17 samples, 0.05%)</title><rect x="0.0788%" y="213" width="0.0479%" height="15" fill="rgb(220,122,19)" fg:x="28" fg:w="17"/><text x="0.3288%" y="223.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyCommandBuffer dealloc] (17 samples, 0.05%)</title><rect x="0.0788%" y="197" width="0.0479%" height="15" fill="rgb(250,228,42)" fg:x="28" fg:w="17"/><text x="0.3288%" y="207.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyDevice alertCommandBufferActivityComplete] (14 samples, 0.04%)</title><rect x="0.0873%" y="181" width="0.0394%" height="15" fill="rgb(240,193,28)" fg:x="31" fg:w="14"/><text x="0.3373%" y="191.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (14 samples, 0.04%)</title><rect x="0.0873%" y="165" width="0.0394%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="14"/><text x="0.3373%" y="175.50"></text></g><g><title>libdispatch.dylib`_dispatch_kq_drain (14 samples, 0.04%)</title><rect x="0.0873%" y="149" width="0.0394%" height="15" fill="rgb(206,188,39)" fg:x="31" fg:w="14"/><text x="0.3373%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`kevent_qos (14 samples, 0.04%)</title><rect x="0.0873%" y="133" width="0.0394%" height="15" fill="rgb(217,207,13)" fg:x="31" fg:w="14"/><text x="0.3373%" y="143.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (19 samples, 0.05%)</title><rect x="0.0760%" y="229" width="0.0535%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="19"/><text x="0.3260%" y="239.50"></text></g><g><title>Metal`MTLDispatchListApply (9 samples, 0.03%)</title><rect x="0.1351%" y="181" width="0.0253%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="9"/><text x="0.3851%" y="191.50"></text></g><g><title>AppleMetalOpenGLRenderer`invocation function for block in GLDContextRec::flushContextInternal (8 samples, 0.02%)</title><rect x="0.1379%" y="165" width="0.0225%" height="15" fill="rgb(210,31,41)" fg:x="49" fg:w="8"/><text x="0.3879%" y="175.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLRResourceList::makeResourcesNotBusyAndReset (7 samples, 0.02%)</title><rect x="0.1408%" y="149" width="0.0197%" height="15" fill="rgb(221,200,47)" fg:x="50" fg:w="7"/><text x="0.3908%" y="159.50"></text></g><g><title>AppleMetalOpenGLRenderer`std::__1::__hash_table&lt;GLRResource*, std::__1::hash&lt;GLRResource*&gt;, std::__1::equal_to&lt;GLRResource*&gt;, std::__1::allocator&lt;GLRResource*&gt;&gt;::clear (7 samples, 0.02%)</title><rect x="0.1408%" y="133" width="0.0197%" height="15" fill="rgb(226,26,5)" fg:x="50" fg:w="7"/><text x="0.3908%" y="143.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didCompleteWithStartTime:endTime:error:] (11 samples, 0.03%)</title><rect x="0.1323%" y="197" width="0.0310%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="11"/><text x="0.3823%" y="207.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (24 samples, 0.07%)</title><rect x="0.1323%" y="213" width="0.0676%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="24"/><text x="0.3823%" y="223.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageDealloc (11 samples, 0.03%)</title><rect x="0.1689%" y="197" width="0.0310%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="11"/><text x="0.4189%" y="207.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageReset (11 samples, 0.03%)</title><rect x="0.1689%" y="181" width="0.0310%" height="15" fill="rgb(247,18,42)" fg:x="60" fg:w="11"/><text x="0.4189%" y="191.50"></text></g><g><title>IOGPU`_iogpuMetalCommandBufferStorageReleaseCurrentResources (7 samples, 0.02%)</title><rect x="0.1802%" y="165" width="0.0197%" height="15" fill="rgb(241,131,45)" fg:x="64" fg:w="7"/><text x="0.4302%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.02%)</title><rect x="0.1802%" y="149" width="0.0197%" height="15" fill="rgb(249,31,29)" fg:x="64" fg:w="7"/><text x="0.4302%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (50 samples, 0.14%)</title><rect x="0.0619%" y="277" width="0.1408%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="50"/><text x="0.3119%" y="287.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (50 samples, 0.14%)</title><rect x="0.0619%" y="261" width="0.1408%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="50"/><text x="0.3119%" y="271.50"></text></g><g><title>IOGPU`IOGPUNotificationQueueDispatchAvailableCompletionNotifications (45 samples, 0.13%)</title><rect x="0.0760%" y="245" width="0.1267%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="45"/><text x="0.3260%" y="255.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (25 samples, 0.07%)</title><rect x="0.1323%" y="229" width="0.0704%" height="15" fill="rgb(232,36,49)" fg:x="47" fg:w="25"/><text x="0.3823%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (51 samples, 0.14%)</title><rect x="0.0619%" y="309" width="0.1436%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="51"/><text x="0.3119%" y="319.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (51 samples, 0.14%)</title><rect x="0.0619%" y="293" width="0.1436%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="51"/><text x="0.3119%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (52 samples, 0.15%)</title><rect x="0.0619%" y="325" width="0.1464%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="52"/><text x="0.3119%" y="335.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (53 samples, 0.15%)</title><rect x="0.0619%" y="357" width="0.1492%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="53"/><text x="0.3119%" y="367.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (53 samples, 0.15%)</title><rect x="0.0619%" y="341" width="0.1492%" height="15" fill="rgb(241,83,37)" fg:x="22" fg:w="53"/><text x="0.3119%" y="351.50"></text></g><g><title>libdispatch.dylib`_dispatch_root_queue_drain_deferred_wlh (77 samples, 0.22%)</title><rect x="0.0056%" y="405" width="0.2168%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="77"/><text x="0.2556%" y="415.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (77 samples, 0.22%)</title><rect x="0.0056%" y="389" width="0.2168%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="77"/><text x="0.2556%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (77 samples, 0.22%)</title><rect x="0.0056%" y="373" width="0.2168%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="77"/><text x="0.2556%" y="383.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (4 samples, 0.01%)</title><rect x="0.2111%" y="357" width="0.0113%" height="15" fill="rgb(238,167,29)" fg:x="75" fg:w="4"/><text x="0.4611%" y="367.50"></text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (82 samples, 0.23%)</title><rect x="0.0056%" y="421" width="0.2308%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="82"/><text x="0.2556%" y="431.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_merge (4 samples, 0.01%)</title><rect x="0.2252%" y="405" width="0.0113%" height="15" fill="rgb(231,60,39)" fg:x="80" fg:w="4"/><text x="0.4752%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (86 samples, 0.24%)</title><rect x="0.0056%" y="437" width="0.2421%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="86"/><text x="0.2556%" y="447.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_worker_thread (4 samples, 0.01%)</title><rect x="0.2365%" y="421" width="0.0113%" height="15" fill="rgb(235,93,37)" fg:x="84" fg:w="4"/><text x="0.4865%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (95 samples, 0.27%)</title><rect x="0.2477%" y="437" width="0.2674%" height="15" fill="rgb(213,116,39)" fg:x="88" fg:w="95"/><text x="0.4977%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (187 samples, 0.53%)</title><rect x="0.0056%" y="453" width="0.5264%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="187"/><text x="0.2556%" y="463.50"></text></g><g><title>nand2tetris`std::sys::pal::unix::time::Timespec::now (157 samples, 0.44%)</title><rect x="0.5405%" y="357" width="0.4420%" height="15" fill="rgb(206,96,30)" fg:x="192" fg:w="157"/><text x="0.7905%" y="367.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (100 samples, 0.28%)</title><rect x="0.9938%" y="325" width="0.2815%" height="15" fill="rgb(218,138,4)" fg:x="353" fg:w="100"/><text x="1.2438%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (189 samples, 0.53%)</title><rect x="1.2753%" y="309" width="0.5321%" height="15" fill="rgb(250,191,14)" fg:x="453" fg:w="189"/><text x="1.5253%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11,121 samples, 31.31%)</title><rect x="1.8074%" y="309" width="31.3082%" height="15" fill="rgb(239,60,40)" fg:x="642" fg:w="11121"/><text x="2.0574%" y="319.50">libsystem_kernel.dylib`mach_absolute_time</text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (215 samples, 0.61%)</title><rect x="33.1156%" y="309" width="0.6053%" height="15" fill="rgb(206,27,48)" fg:x="11763" fg:w="215"/><text x="33.3656%" y="319.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (33 samples, 0.09%)</title><rect x="33.7209%" y="309" width="0.0929%" height="15" fill="rgb(225,35,8)" fg:x="11978" fg:w="33"/><text x="33.9709%" y="319.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11,879 samples, 33.44%)</title><rect x="1.2753%" y="325" width="33.4422%" height="15" fill="rgb(250,213,24)" fg:x="453" fg:w="11879"/><text x="1.5253%" y="335.50">libsystem_c.dylib`clock_gettime</text></g><g><title>nand2tetris`std::sys::pal::unix::time::Timespec::now (12,202 samples, 34.35%)</title><rect x="0.9938%" y="341" width="34.3515%" height="15" fill="rgb(247,123,22)" fg:x="353" fg:w="12202"/><text x="1.2438%" y="351.50">nand2tetris`std::sys::pal::unix::time::Timespec::now</text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (8 samples, 0.02%)</title><rect x="35.3481%" y="245" width="0.0225%" height="15" fill="rgb(231,138,38)" fg:x="12556" fg:w="8"/><text x="35.5981%" y="255.50"></text></g><g><title>AppKit`-[NSThemeFrame initWithFrame:styleMask:owner:] (5 samples, 0.01%)</title><rect x="35.3565%" y="229" width="0.0141%" height="15" fill="rgb(231,145,46)" fg:x="12559" fg:w="5"/><text x="35.6065%" y="239.50"></text></g><g><title>nand2tetris`sdl2::video::WindowBuilder::build (10 samples, 0.03%)</title><rect x="35.3453%" y="341" width="0.0282%" height="15" fill="rgb(251,118,11)" fg:x="12555" fg:w="10"/><text x="35.5953%" y="351.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_CreateWindow_REAL (10 samples, 0.03%)</title><rect x="35.3453%" y="325" width="0.0282%" height="15" fill="rgb(217,147,25)" fg:x="12555" fg:w="10"/><text x="35.5953%" y="335.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_CreateWindow (9 samples, 0.03%)</title><rect x="35.3481%" y="309" width="0.0253%" height="15" fill="rgb(247,81,37)" fg:x="12556" fg:w="9"/><text x="35.5981%" y="319.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:screen:] (9 samples, 0.03%)</title><rect x="35.3481%" y="293" width="0.0253%" height="15" fill="rgb(209,12,38)" fg:x="12556" fg:w="9"/><text x="35.5981%" y="303.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (9 samples, 0.03%)</title><rect x="35.3481%" y="277" width="0.0253%" height="15" fill="rgb(227,1,9)" fg:x="12556" fg:w="9"/><text x="35.5981%" y="287.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (9 samples, 0.03%)</title><rect x="35.3481%" y="261" width="0.0253%" height="15" fill="rgb(248,47,43)" fg:x="12556" fg:w="9"/><text x="35.5981%" y="271.50"></text></g><g><title>GLEngine`glDrawElements_GL3Exec (4 samples, 0.01%)</title><rect x="35.3847%" y="325" width="0.0113%" height="15" fill="rgb(221,10,30)" fg:x="12569" fg:w="4"/><text x="35.6347%" y="335.50"></text></g><g><title>nand2tetris`imgui_opengl_renderer::Renderer::render (12 samples, 0.03%)</title><rect x="35.3819%" y="341" width="0.0338%" height="15" fill="rgb(210,229,1)" fg:x="12568" fg:w="12"/><text x="35.6319%" y="351.50"></text></g><g><title>nand2tetris`engine::ecs::World::debug (5 samples, 0.01%)</title><rect x="35.4269%" y="325" width="0.0141%" height="15" fill="rgb(222,148,37)" fg:x="12584" fg:w="5"/><text x="35.6769%" y="335.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::debug (5 samples, 0.01%)</title><rect x="35.4269%" y="309" width="0.0141%" height="15" fill="rgb(234,67,33)" fg:x="12584" fg:w="5"/><text x="35.6769%" y="319.50"></text></g><g><title>nand2tetris`ImGui::RenderTextWrapped (4 samples, 0.01%)</title><rect x="35.4297%" y="293" width="0.0113%" height="15" fill="rgb(247,98,35)" fg:x="12585" fg:w="4"/><text x="35.6797%" y="303.50"></text></g><g><title>nand2tetris`ImFont::RenderText (4 samples, 0.01%)</title><rect x="35.4297%" y="277" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="12585" fg:w="4"/><text x="35.6797%" y="287.50"></text></g><g><title>nand2tetris`imgui::window::Window&lt;Label&gt;::build (16 samples, 0.05%)</title><rect x="35.4213%" y="341" width="0.0450%" height="15" fill="rgb(213,79,30)" fg:x="12582" fg:w="16"/><text x="35.6713%" y="351.50"></text></g><g><title>nand2tetris`ImGui::Begin (5 samples, 0.01%)</title><rect x="35.4663%" y="309" width="0.0141%" height="15" fill="rgb(246,177,23)" fg:x="12598" fg:w="5"/><text x="35.7163%" y="319.50"></text></g><g><title>nand2tetris`imgui::context::Context::frame (6 samples, 0.02%)</title><rect x="35.4663%" y="341" width="0.0169%" height="15" fill="rgb(230,62,27)" fg:x="12598" fg:w="6"/><text x="35.7163%" y="351.50"></text></g><g><title>nand2tetris`ImGui::NewFrame (6 samples, 0.02%)</title><rect x="35.4663%" y="325" width="0.0169%" height="15" fill="rgb(216,154,8)" fg:x="12598" fg:w="6"/><text x="35.7163%" y="335.50"></text></g><g><title>nand2tetris`gl::load_with::inner (4 samples, 0.01%)</title><rect x="35.4832%" y="341" width="0.0113%" height="15" fill="rgb(244,35,45)" fg:x="12604" fg:w="4"/><text x="35.7332%" y="351.50"></text></g><g><title>nand2tetris`gl::metaloadfn (4 samples, 0.01%)</title><rect x="35.4832%" y="325" width="0.0113%" height="15" fill="rgb(251,115,12)" fg:x="12604" fg:w="4"/><text x="35.7332%" y="335.50"></text></g><g><title>nand2tetris`sdl2::video::_&lt;impl sdl2::sdl::VideoSubsystem&gt;::gl_get_proc_address (4 samples, 0.01%)</title><rect x="35.4832%" y="309" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="12604" fg:w="4"/><text x="35.7332%" y="319.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_LoadFunction_REAL (4 samples, 0.01%)</title><rect x="35.4832%" y="293" width="0.0113%" height="15" fill="rgb(233,84,52)" fg:x="12604" fg:w="4"/><text x="35.7332%" y="303.50"></text></g><g><title>nand2tetris`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.01%)</title><rect x="35.4973%" y="325" width="0.0113%" height="15" fill="rgb(207,117,47)" fg:x="12609" fg:w="4"/><text x="35.7473%" y="335.50"></text></g><g><title>nand2tetris`&lt;nand2tetris::Ball as engine::ecs::Component&gt;::update (192 samples, 0.54%)</title><rect x="35.5086%" y="325" width="0.5405%" height="15" fill="rgb(249,43,39)" fg:x="12613" fg:w="192"/><text x="35.7586%" y="335.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::UpdateWorld as engine::ecs::WorldOp&lt;engine::ecs::UpdateWorld&gt;&gt;::find_component (141 samples, 0.40%)</title><rect x="36.0491%" y="325" width="0.3969%" height="15" fill="rgb(209,38,44)" fg:x="12805" fg:w="141"/><text x="36.2991%" y="335.50"></text></g><g><title>nand2tetris`engine::ecs::UpdateWorld::get_resource (43 samples, 0.12%)</title><rect x="36.4489%" y="309" width="0.1211%" height="15" fill="rgb(236,212,23)" fg:x="12947" fg:w="43"/><text x="36.6989%" y="319.50"></text></g><g><title>nand2tetris`core::ptr::drop_in_place&lt;core::slice::iter::Iter&lt;engine::ecs::ComponentWrapper&lt;nand2tetris::Brick&gt;&gt;&gt; (36 samples, 0.10%)</title><rect x="36.5699%" y="309" width="0.1013%" height="15" fill="rgb(242,79,21)" fg:x="12990" fg:w="36"/><text x="36.8199%" y="319.50"></text></g><g><title>nand2tetris`DYLD-STUB$$free (105 samples, 0.30%)</title><rect x="36.6713%" y="309" width="0.2956%" height="15" fill="rgb(211,96,35)" fg:x="13026" fg:w="105"/><text x="36.9213%" y="319.50"></text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (444 samples, 1.25%)</title><rect x="36.9697%" y="277" width="1.2500%" height="15" fill="rgb(253,215,40)" fg:x="13132" fg:w="444"/><text x="37.2197%" y="287.50"></text></g><g><title>nand2tetris`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,478 samples, 4.16%)</title><rect x="38.2196%" y="277" width="4.1609%" height="15" fill="rgb(211,81,21)" fg:x="13576" fg:w="1478"/><text x="38.4696%" y="287.50">nand2..</text></g><g><title>nand2tetris`engine::ecs::UpdateWorld::get_resource (2,223 samples, 6.26%)</title><rect x="36.9697%" y="293" width="6.2583%" height="15" fill="rgb(208,190,38)" fg:x="13132" fg:w="2223"/><text x="37.2197%" y="303.50">nand2tet..</text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (7 samples, 0.02%)</title><rect x="43.2279%" y="293" width="0.0197%" height="15" fill="rgb(235,213,38)" fg:x="15355" fg:w="7"/><text x="43.4779%" y="303.50"></text></g><g><title>nand2tetris`__rdl_alloc (44 samples, 0.12%)</title><rect x="43.2477%" y="293" width="0.1239%" height="15" fill="rgb(237,122,38)" fg:x="15362" fg:w="44"/><text x="43.4977%" y="303.50"></text></g><g><title>nand2tetris`DYLD-STUB$$malloc (23 samples, 0.06%)</title><rect x="43.3715%" y="293" width="0.0648%" height="15" fill="rgb(244,218,35)" fg:x="15406" fg:w="23"/><text x="43.6215%" y="303.50"></text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (1,739 samples, 4.90%)</title><rect x="43.4363%" y="277" width="4.8957%" height="15" fill="rgb(240,68,47)" fg:x="15429" fg:w="1739"/><text x="43.6863%" y="287.50">nand2t..</text></g><g><title>nand2tetris`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (932 samples, 2.62%)</title><rect x="48.3320%" y="277" width="2.6238%" height="15" fill="rgb(210,16,53)" fg:x="17168" fg:w="932"/><text x="48.5820%" y="287.50">na..</text></g><g><title>nand2tetris`&lt;engine::ecs::UpdateWorld as engine::ecs::WorldOp&lt;engine::ecs::UpdateWorld&gt;&gt;::find_component (4,192 samples, 11.80%)</title><rect x="43.4363%" y="293" width="11.8015%" height="15" fill="rgb(235,124,12)" fg:x="15429" fg:w="4192"/><text x="43.6863%" y="303.50">nand2tetris`&lt;engin..</text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (769 samples, 2.16%)</title><rect x="55.2377%" y="277" width="2.1649%" height="15" fill="rgb(224,169,11)" fg:x="19621" fg:w="769"/><text x="55.4877%" y="287.50">n..</text></g><g><title>nand2tetris`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (299 samples, 0.84%)</title><rect x="57.4027%" y="277" width="0.8418%" height="15" fill="rgb(250,166,2)" fg:x="20390" fg:w="299"/><text x="57.6527%" y="287.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::UpdateWorld as engine::ecs::WorldOp&lt;engine::ecs::UpdateWorld&gt;&gt;::find_all (4,120 samples, 11.60%)</title><rect x="55.2377%" y="293" width="11.5988%" height="15" fill="rgb(242,216,29)" fg:x="19621" fg:w="4120"/><text x="55.4877%" y="303.50">nand2tetris`&lt;engi..</text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::as_any (112 samples, 0.32%)</title><rect x="66.8421%" y="293" width="0.3153%" height="15" fill="rgb(230,116,27)" fg:x="23743" fg:w="112"/><text x="67.0921%" y="303.50"></text></g><g><title>nand2tetris`&lt;T as core::any::Any&gt;::type_id (271 samples, 0.76%)</title><rect x="67.1575%" y="293" width="0.7629%" height="15" fill="rgb(228,99,48)" fg:x="23855" fg:w="271"/><text x="67.4075%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (296 samples, 0.83%)</title><rect x="67.9204%" y="293" width="0.8333%" height="15" fill="rgb(253,11,6)" fg:x="24126" fg:w="296"/><text x="68.1704%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (466 samples, 1.31%)</title><rect x="68.7565%" y="293" width="1.3119%" height="15" fill="rgb(247,143,39)" fg:x="24423" fg:w="466"/><text x="69.0065%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (198 samples, 0.56%)</title><rect x="70.0684%" y="293" width="0.5574%" height="15" fill="rgb(236,97,10)" fg:x="24889" fg:w="198"/><text x="70.3184%" y="303.50"></text></g><g><title>nand2tetris`&lt;nand2tetris::Ball as engine::ecs::Component&gt;::update (12,916 samples, 36.36%)</title><rect x="36.9697%" y="309" width="36.3616%" height="15" fill="rgb(233,208,19)" fg:x="13132" fg:w="12916"/><text x="37.2197%" y="319.50">nand2tetris`&lt;nand2tetris::Ball as engine::ecs::Component&gt;::..</text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (1,097 samples, 3.09%)</title><rect x="73.3313%" y="293" width="3.0883%" height="15" fill="rgb(216,164,2)" fg:x="26048" fg:w="1097"/><text x="73.5813%" y="303.50">nan..</text></g><g><title>nand2tetris`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (924 samples, 2.60%)</title><rect x="76.4196%" y="293" width="2.6013%" height="15" fill="rgb(220,129,5)" fg:x="27145" fg:w="924"/><text x="76.6696%" y="303.50">na..</text></g><g><title>nand2tetris`&lt;engine::ecs::UpdateWorld as engine::ecs::WorldOp&lt;engine::ecs::UpdateWorld&gt;&gt;::find_component (5,479 samples, 15.42%)</title><rect x="73.3313%" y="309" width="15.4247%" height="15" fill="rgb(242,17,10)" fg:x="26048" fg:w="5479"/><text x="73.5813%" y="319.50">nand2tetris`&lt;engine::ecs..</text></g><g><title>nand2tetris`&lt;engine::ecs::UpdateWorld as engine::ecs::WorldOp&lt;engine::ecs::UpdateWorld&gt;&gt;::find_all (28 samples, 0.08%)</title><rect x="88.7559%" y="309" width="0.0788%" height="15" fill="rgb(242,107,0)" fg:x="31527" fg:w="28"/><text x="89.0059%" y="319.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::as_any (81 samples, 0.23%)</title><rect x="88.8348%" y="309" width="0.2280%" height="15" fill="rgb(251,28,31)" fg:x="31555" fg:w="81"/><text x="89.0848%" y="319.50"></text></g><g><title>nand2tetris`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.15%)</title><rect x="89.0628%" y="309" width="0.1464%" height="15" fill="rgb(233,223,10)" fg:x="31636" fg:w="52"/><text x="89.3128%" y="319.50"></text></g><g><title>nand2tetris`&lt;T as core::any::Any&gt;::type_id (74 samples, 0.21%)</title><rect x="89.2092%" y="309" width="0.2083%" height="15" fill="rgb(215,21,27)" fg:x="31688" fg:w="74"/><text x="89.4592%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (75 samples, 0.21%)</title><rect x="89.4175%" y="309" width="0.2111%" height="15" fill="rgb(232,23,21)" fg:x="31762" fg:w="75"/><text x="89.6675%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (265 samples, 0.75%)</title><rect x="89.6287%" y="309" width="0.7460%" height="15" fill="rgb(244,5,23)" fg:x="31837" fg:w="265"/><text x="89.8787%" y="319.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::update_all (19,472 samples, 54.82%)</title><rect x="36.4460%" y="325" width="54.8183%" height="15" fill="rgb(226,81,46)" fg:x="12946" fg:w="19472"/><text x="36.6960%" y="335.50">nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::update_all</text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (4 samples, 0.01%)</title><rect x="91.2643%" y="277" width="0.0113%" height="15" fill="rgb(247,70,30)" fg:x="32418" fg:w="4"/><text x="91.5143%" y="287.50"></text></g><g><title>nand2tetris`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="91.2756%" y="277" width="0.0113%" height="15" fill="rgb(212,68,19)" fg:x="32422" fg:w="4"/><text x="91.5256%" y="287.50"></text></g><g><title>nand2tetris`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.03%)</title><rect x="91.2643%" y="293" width="0.0282%" height="15" fill="rgb(240,187,13)" fg:x="32418" fg:w="10"/><text x="91.5143%" y="303.50"></text></g><g><title>nand2tetris`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.07%)</title><rect x="91.2643%" y="309" width="0.0676%" height="15" fill="rgb(223,113,26)" fg:x="32418" fg:w="24"/><text x="91.5143%" y="319.50"></text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::add_component (27 samples, 0.08%)</title><rect x="91.2643%" y="325" width="0.0760%" height="15" fill="rgb(206,192,2)" fg:x="32418" fg:w="27"/><text x="91.5143%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="91.3516%" y="325" width="0.0113%" height="15" fill="rgb(241,108,4)" fg:x="32449" fg:w="4"/><text x="91.6016%" y="335.50"></text></g><g><title>nand2tetris`engine::ecs::World::update (19,847 samples, 55.87%)</title><rect x="35.4973%" y="341" width="55.8740%" height="15" fill="rgb(247,173,49)" fg:x="12609" fg:w="19847"/><text x="35.7473%" y="351.50">nand2tetris`engine::ecs::World::update</text></g><g><title>nand2tetris`core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="91.3741%" y="341" width="0.0169%" height="15" fill="rgb(224,114,35)" fg:x="32457" fg:w="6"/><text x="91.6241%" y="351.50"></text></g><g><title>nand2tetris`DYLD-STUB$$clock_gettime (61 samples, 0.17%)</title><rect x="91.3938%" y="341" width="0.1717%" height="15" fill="rgb(245,159,27)" fg:x="32464" fg:w="61"/><text x="91.6438%" y="351.50"></text></g><g><title>nand2tetris`&lt;sdl2::keyboard::PressedScancodeIterator as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="91.5656%" y="341" width="0.0141%" height="15" fill="rgb(245,172,44)" fg:x="32525" fg:w="5"/><text x="91.8156%" y="351.50"></text></g><g><title>nand2tetris`&lt;sdl2::keyboard::ScancodeIterator as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="91.5656%" y="325" width="0.0141%" height="15" fill="rgb(236,23,11)" fg:x="32525" fg:w="5"/><text x="91.8156%" y="335.50"></text></g><g><title>libSDL2-2.0.0.dylib`-[SDLApplication sendEvent:] (8 samples, 0.02%)</title><rect x="91.5796%" y="261" width="0.0225%" height="15" fill="rgb(205,117,38)" fg:x="32530" fg:w="8"/><text x="91.8296%" y="271.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) sendEvent:] (7 samples, 0.02%)</title><rect x="91.5824%" y="245" width="0.0197%" height="15" fill="rgb(237,72,25)" fg:x="32531" fg:w="7"/><text x="91.8324%" y="255.50"></text></g><g><title>AppKit`-[NSApplication _handleActivatedEvent:] (4 samples, 0.01%)</title><rect x="91.5909%" y="229" width="0.0113%" height="15" fill="rgb(244,70,9)" fg:x="32534" fg:w="4"/><text x="91.8409%" y="239.50"></text></g><g><title>QuartzCore`CA::Transaction::run_commit_handlers (4 samples, 0.01%)</title><rect x="91.6359%" y="69" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="32550" fg:w="4"/><text x="91.8859%" y="79.50"></text></g><g><title>AppKit`NSDisplayCycleFlush (4 samples, 0.01%)</title><rect x="91.6359%" y="53" width="0.0113%" height="15" fill="rgb(235,36,10)" fg:x="32550" fg:w="4"/><text x="91.8859%" y="63.50"></text></g><g><title>AppKit`NSDisplayCycleObserverInvoke (4 samples, 0.01%)</title><rect x="91.6359%" y="37" width="0.0113%" height="15" fill="rgb(251,123,47)" fg:x="32550" fg:w="4"/><text x="91.8859%" y="47.50"></text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (9 samples, 0.03%)</title><rect x="91.6359%" y="101" width="0.0253%" height="15" fill="rgb(221,13,13)" fg:x="32550" fg:w="9"/><text x="91.8859%" y="111.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (9 samples, 0.03%)</title><rect x="91.6359%" y="85" width="0.0253%" height="15" fill="rgb(238,131,9)" fg:x="32550" fg:w="9"/><text x="91.8859%" y="95.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (5 samples, 0.01%)</title><rect x="91.6472%" y="69" width="0.0141%" height="15" fill="rgb(211,50,8)" fg:x="32554" fg:w="5"/><text x="91.8972%" y="79.50"></text></g><g><title>QuartzCore`CA::Layer::display_if_needed (4 samples, 0.01%)</title><rect x="91.6500%" y="53" width="0.0113%" height="15" fill="rgb(245,182,24)" fg:x="32555" fg:w="4"/><text x="91.9000%" y="63.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (15 samples, 0.04%)</title><rect x="91.6331%" y="133" width="0.0422%" height="15" fill="rgb(242,14,37)" fg:x="32549" fg:w="15"/><text x="91.8831%" y="143.50"></text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (14 samples, 0.04%)</title><rect x="91.6359%" y="117" width="0.0394%" height="15" fill="rgb(246,228,12)" fg:x="32550" fg:w="14"/><text x="91.8859%" y="127.50"></text></g><g><title>AppKit`__38-[NSApplication setWindowsNeedUpdate:]_block_invoke_2 (5 samples, 0.01%)</title><rect x="91.6613%" y="101" width="0.0141%" height="15" fill="rgb(213,55,15)" fg:x="32559" fg:w="5"/><text x="91.9113%" y="111.50"></text></g><g><title>AppKit`-[NSApplication updateWindows] (5 samples, 0.01%)</title><rect x="91.6613%" y="85" width="0.0141%" height="15" fill="rgb(209,9,3)" fg:x="32559" fg:w="5"/><text x="91.9113%" y="95.50"></text></g><g><title>AppKit`+[NSTextInputContext currentInputContext_withFirstResponderSync:] (5 samples, 0.01%)</title><rect x="91.6613%" y="69" width="0.0141%" height="15" fill="rgb(230,59,30)" fg:x="32559" fg:w="5"/><text x="91.9113%" y="79.50"></text></g><g><title>AppKit`-[NSTextInputContext activate] (4 samples, 0.01%)</title><rect x="91.6641%" y="53" width="0.0113%" height="15" fill="rgb(209,121,21)" fg:x="32560" fg:w="4"/><text x="91.9141%" y="63.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (17 samples, 0.05%)</title><rect x="91.6303%" y="149" width="0.0479%" height="15" fill="rgb(220,109,13)" fg:x="32548" fg:w="17"/><text x="91.8803%" y="159.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoBlocks (4 samples, 0.01%)</title><rect x="91.6782%" y="149" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="32565" fg:w="4"/><text x="91.9282%" y="159.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ (4 samples, 0.01%)</title><rect x="91.6782%" y="133" width="0.0113%" height="15" fill="rgb(215,41,42)" fg:x="32565" fg:w="4"/><text x="91.9282%" y="143.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (30 samples, 0.08%)</title><rect x="91.6078%" y="165" width="0.0845%" height="15" fill="rgb(224,123,36)" fg:x="32540" fg:w="30"/><text x="91.8578%" y="175.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (35 samples, 0.10%)</title><rect x="91.6022%" y="229" width="0.0985%" height="15" fill="rgb(240,125,3)" fg:x="32538" fg:w="35"/><text x="91.8522%" y="239.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (35 samples, 0.10%)</title><rect x="91.6022%" y="213" width="0.0985%" height="15" fill="rgb(205,98,50)" fg:x="32538" fg:w="35"/><text x="91.8522%" y="223.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (35 samples, 0.10%)</title><rect x="91.6022%" y="197" width="0.0985%" height="15" fill="rgb(205,185,37)" fg:x="32538" fg:w="35"/><text x="91.8522%" y="207.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (34 samples, 0.10%)</title><rect x="91.6050%" y="181" width="0.0957%" height="15" fill="rgb(238,207,15)" fg:x="32539" fg:w="34"/><text x="91.8550%" y="191.50"></text></g><g><title>nand2tetris`&lt;sdl2::event::EventPollIterator as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.13%)</title><rect x="91.5796%" y="341" width="0.1323%" height="15" fill="rgb(213,199,42)" fg:x="32530" fg:w="47"/><text x="91.8296%" y="351.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_WaitEventTimeout_REAL (47 samples, 0.13%)</title><rect x="91.5796%" y="325" width="0.1323%" height="15" fill="rgb(235,201,11)" fg:x="32530" fg:w="47"/><text x="91.8296%" y="335.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_PumpEventsInternal (47 samples, 0.13%)</title><rect x="91.5796%" y="309" width="0.1323%" height="15" fill="rgb(207,46,11)" fg:x="32530" fg:w="47"/><text x="91.8296%" y="319.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_PumpEvents (47 samples, 0.13%)</title><rect x="91.5796%" y="293" width="0.1323%" height="15" fill="rgb(241,35,35)" fg:x="32530" fg:w="47"/><text x="91.8296%" y="303.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_PumpEventsUntilDate (47 samples, 0.13%)</title><rect x="91.5796%" y="277" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="32530" fg:w="47"/><text x="91.8296%" y="287.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (39 samples, 0.11%)</title><rect x="91.6022%" y="261" width="0.1098%" height="15" fill="rgb(247,202,23)" fg:x="32538" fg:w="39"/><text x="91.8522%" y="271.50"></text></g><g><title>AppKit`_DPSNextEvent (39 samples, 0.11%)</title><rect x="91.6022%" y="245" width="0.1098%" height="15" fill="rgb(219,102,11)" fg:x="32538" fg:w="39"/><text x="91.8522%" y="255.50"></text></g><g><title>HIToolbox`AEProcessAppleEvent (4 samples, 0.01%)</title><rect x="91.7007%" y="229" width="0.0113%" height="15" fill="rgb(243,110,44)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="239.50"></text></g><g><title>AE`aeProcessAppleEvent (4 samples, 0.01%)</title><rect x="91.7007%" y="213" width="0.0113%" height="15" fill="rgb(222,74,54)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="223.50"></text></g><g><title>AE`0x00000001976f02c0 (4 samples, 0.01%)</title><rect x="91.7007%" y="197" width="0.0113%" height="15" fill="rgb(216,99,12)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="207.50"></text></g><g><title>AE`0x00000001976f036c (4 samples, 0.01%)</title><rect x="91.7007%" y="181" width="0.0113%" height="15" fill="rgb(226,22,26)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="191.50"></text></g><g><title>Foundation`_NSAppleEventManagerGenericHandler (4 samples, 0.01%)</title><rect x="91.7007%" y="165" width="0.0113%" height="15" fill="rgb(217,163,10)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="175.50"></text></g><g><title>Foundation`-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (4 samples, 0.01%)</title><rect x="91.7007%" y="149" width="0.0113%" height="15" fill="rgb(213,25,53)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="159.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (4 samples, 0.01%)</title><rect x="91.7007%" y="133" width="0.0113%" height="15" fill="rgb(252,105,26)" fg:x="32573" fg:w="4"/><text x="91.9507%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (488 samples, 1.37%)</title><rect x="91.7176%" y="309" width="1.3738%" height="15" fill="rgb(220,39,43)" fg:x="32579" fg:w="488"/><text x="91.9676%" y="319.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::loadCurrentVertexArray (4 samples, 0.01%)</title><rect x="93.1139%" y="245" width="0.0113%" height="15" fill="rgb(229,68,48)" fg:x="33075" fg:w="4"/><text x="93.3639%" y="255.50"></text></g><g><title>GLEngine`gleDrawArraysOrElements_Entries_Body (16 samples, 0.05%)</title><rect x="93.0942%" y="293" width="0.0450%" height="15" fill="rgb(252,8,32)" fg:x="33068" fg:w="16"/><text x="93.3442%" y="303.50"></text></g><g><title>GLEngine`gleDoDrawDispatchCoreGL3 (16 samples, 0.05%)</title><rect x="93.0942%" y="277" width="0.0450%" height="15" fill="rgb(223,20,43)" fg:x="33068" fg:w="16"/><text x="93.3442%" y="287.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldUpdateDispatch (13 samples, 0.04%)</title><rect x="93.1027%" y="261" width="0.0366%" height="15" fill="rgb(229,81,49)" fg:x="33071" fg:w="13"/><text x="93.3527%" y="271.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::buildPipelineState (4 samples, 0.01%)</title><rect x="93.1280%" y="245" width="0.0113%" height="15" fill="rgb(236,28,36)" fg:x="33080" fg:w="4"/><text x="93.3780%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.02%)</title><rect x="93.1590%" y="245" width="0.0169%" height="15" fill="rgb(249,185,26)" fg:x="33091" fg:w="6"/><text x="93.4090%" y="255.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (5 samples, 0.01%)</title><rect x="93.1787%" y="245" width="0.0141%" height="15" fill="rgb(249,174,33)" fg:x="33098" fg:w="5"/><text x="93.4287%" y="255.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::beginRenderPass (18 samples, 0.05%)</title><rect x="93.1533%" y="277" width="0.0507%" height="15" fill="rgb(233,201,37)" fg:x="33089" fg:w="18"/><text x="93.4033%" y="287.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (17 samples, 0.05%)</title><rect x="93.1562%" y="261" width="0.0479%" height="15" fill="rgb(221,78,26)" fg:x="33090" fg:w="17"/><text x="93.4062%" y="271.50"></text></g><g><title>GLEngine`glDrawElements_GL3Exec (44 samples, 0.12%)</title><rect x="93.0942%" y="309" width="0.1239%" height="15" fill="rgb(250,127,30)" fg:x="33068" fg:w="44"/><text x="93.3442%" y="319.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldRenderVertexArray(GLDContextRec*, unsigned int, unsigned int, int, int, unsigned int, void const*, int, void const*) (28 samples, 0.08%)</title><rect x="93.1393%" y="293" width="0.0788%" height="15" fill="rgb(230,49,44)" fg:x="33084" fg:w="28"/><text x="93.3893%" y="303.50"></text></g><g><title>GLEngine`gleDoDrawDispatchCoreGL3 (4 samples, 0.01%)</title><rect x="93.2181%" y="293" width="0.0113%" height="15" fill="rgb(229,67,23)" fg:x="33112" fg:w="4"/><text x="93.4681%" y="303.50"></text></g><g><title>GLEngine`glDrawElements_ACC_GL3Exec (6 samples, 0.02%)</title><rect x="93.2181%" y="309" width="0.0169%" height="15" fill="rgb(249,83,47)" fg:x="33112" fg:w="6"/><text x="93.4681%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (16 samples, 0.05%)</title><rect x="93.2350%" y="245" width="0.0450%" height="15" fill="rgb(215,43,3)" fg:x="33118" fg:w="16"/><text x="93.4850%" y="255.50"></text></g><g><title>GLEngine`gleOrphanBufferObject (18 samples, 0.05%)</title><rect x="93.2350%" y="293" width="0.0507%" height="15" fill="rgb(238,154,13)" fg:x="33118" fg:w="18"/><text x="93.4850%" y="303.50"></text></g><g><title>GLEngine`gleCleanupOrphans (18 samples, 0.05%)</title><rect x="93.2350%" y="277" width="0.0507%" height="15" fill="rgb(219,56,2)" fg:x="33118" fg:w="18"/><text x="93.4850%" y="287.50"></text></g><g><title>GLEngine`gleFreeOrphan (18 samples, 0.05%)</title><rect x="93.2350%" y="261" width="0.0507%" height="15" fill="rgb(233,0,4)" fg:x="33118" fg:w="18"/><text x="93.4850%" y="271.50"></text></g><g><title>GLEngine`glBufferData_Exec (20 samples, 0.06%)</title><rect x="93.2350%" y="309" width="0.0563%" height="15" fill="rgb(235,30,7)" fg:x="33118" fg:w="20"/><text x="93.4850%" y="319.50"></text></g><g><title>nand2tetris`engine::graphics::batch::Batch::render (561 samples, 1.58%)</title><rect x="91.7148%" y="325" width="1.5793%" height="15" fill="rgb(250,79,13)" fg:x="32578" fg:w="561"/><text x="91.9648%" y="335.50"></text></g><g><title>nand2tetris`engine::graphics::batch::Batch::rect (78 samples, 0.22%)</title><rect x="93.2997%" y="309" width="0.2196%" height="15" fill="rgb(211,146,34)" fg:x="33141" fg:w="78"/><text x="93.5497%" y="319.50"></text></g><g><title>nand2tetris`engine::graphics::batch::Batch::push_vertex (618 samples, 1.74%)</title><rect x="93.5193%" y="277" width="1.7398%" height="15" fill="rgb(228,22,38)" fg:x="33219" fg:w="618"/><text x="93.7693%" y="287.50"></text></g><g><title>nand2tetris`engine::graphics::batch::Batch::current_batch (66 samples, 0.19%)</title><rect x="95.2591%" y="277" width="0.1858%" height="15" fill="rgb(235,168,5)" fg:x="33837" fg:w="66"/><text x="95.5091%" y="287.50"></text></g><g><title>nand2tetris`engine::graphics::batch::Batch::rect (953 samples, 2.68%)</title><rect x="93.5193%" y="293" width="2.6829%" height="15" fill="rgb(221,155,16)" fg:x="33219" fg:w="953"/><text x="93.7693%" y="303.50">na..</text></g><g><title>nand2tetris`engine::graphics::batch::Batch::push_vertex (679 samples, 1.91%)</title><rect x="96.2022%" y="293" width="1.9115%" height="15" fill="rgb(215,215,53)" fg:x="34172" fg:w="679"/><text x="96.4522%" y="303.50">n..</text></g><g><title>nand2tetris`engine::graphics::batch::Batch::current_batch (57 samples, 0.16%)</title><rect x="98.1138%" y="293" width="0.1605%" height="15" fill="rgb(223,4,10)" fg:x="34851" fg:w="57"/><text x="98.3638%" y="303.50"></text></g><g><title>nand2tetris`engine::ecs::World::render (1,952 samples, 5.50%)</title><rect x="93.2997%" y="325" width="5.4953%" height="15" fill="rgb(234,103,6)" fg:x="33141" fg:w="1952"/><text x="93.5497%" y="335.50">nand2te..</text></g><g><title>nand2tetris`&lt;engine::ecs::ComponentStorage&lt;T&gt; as engine::ecs::Updateable&gt;::render_all (1,874 samples, 5.28%)</title><rect x="93.5193%" y="309" width="5.2758%" height="15" fill="rgb(227,97,0)" fg:x="33219" fg:w="1874"/><text x="93.7693%" y="319.50">nand2t..</text></g><g><title>nand2tetris`&lt;nand2tetris::Foo as engine::Game&gt;::render (2,529 samples, 7.12%)</title><rect x="91.7119%" y="341" width="7.1197%" height="15" fill="rgb(234,150,53)" fg:x="32577" fg:w="2529"/><text x="91.9619%" y="351.50">nand2tetri..</text></g><g><title>GLEngine`glClear_Exec (12 samples, 0.03%)</title><rect x="98.7979%" y="325" width="0.0338%" height="15" fill="rgb(228,201,54)" fg:x="35094" fg:w="12"/><text x="99.0479%" y="335.50"></text></g><g><title>GLEngine`gleUpdateDrawFramebufferState (12 samples, 0.03%)</title><rect x="98.7979%" y="309" width="0.0338%" height="15" fill="rgb(222,22,37)" fg:x="35094" fg:w="12"/><text x="99.0479%" y="319.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldUpdateDrawFramebuffer (12 samples, 0.03%)</title><rect x="98.7979%" y="293" width="0.0338%" height="15" fill="rgb(237,53,32)" fg:x="35094" fg:w="12"/><text x="99.0479%" y="303.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::beginRenderPass (11 samples, 0.03%)</title><rect x="98.8007%" y="277" width="0.0310%" height="15" fill="rgb(233,25,53)" fg:x="35095" fg:w="11"/><text x="99.0507%" y="287.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (8 samples, 0.02%)</title><rect x="98.8092%" y="261" width="0.0225%" height="15" fill="rgb(210,40,34)" fg:x="35098" fg:w="8"/><text x="99.0592%" y="271.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (5 samples, 0.01%)</title><rect x="98.8176%" y="245" width="0.0141%" height="15" fill="rgb(241,220,44)" fg:x="35101" fg:w="5"/><text x="99.0676%" y="255.50"></text></g><g><title>nand2tetris`&lt;nand2tetris::Foo as engine::Game&gt;::init (5 samples, 0.01%)</title><rect x="98.8317%" y="341" width="0.0141%" height="15" fill="rgb(235,28,35)" fg:x="35106" fg:w="5"/><text x="99.0817%" y="351.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_InitSubSystem_REAL (18 samples, 0.05%)</title><rect x="98.8598%" y="341" width="0.0507%" height="15" fill="rgb(210,56,17)" fg:x="35116" fg:w="18"/><text x="99.1098%" y="351.50"></text></g><g><title>libSDL2-2.0.0.dylib`SDL_VideoInit_REAL (18 samples, 0.05%)</title><rect x="98.8598%" y="325" width="0.0507%" height="15" fill="rgb(224,130,29)" fg:x="35116" fg:w="18"/><text x="99.1098%" y="335.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_CreateDevice (15 samples, 0.04%)</title><rect x="98.8683%" y="309" width="0.0422%" height="15" fill="rgb(235,212,8)" fg:x="35119" fg:w="15"/><text x="99.1183%" y="319.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_RegisterApp (15 samples, 0.04%)</title><rect x="98.8683%" y="293" width="0.0422%" height="15" fill="rgb(223,33,50)" fg:x="35119" fg:w="15"/><text x="99.1183%" y="303.50"></text></g><g><title>AppKit`+[NSApplication sharedApplication] (8 samples, 0.02%)</title><rect x="98.8880%" y="277" width="0.0225%" height="15" fill="rgb(219,149,13)" fg:x="35126" fg:w="8"/><text x="99.1380%" y="287.50"></text></g><g><title>AppKit`-[NSApplication init] (8 samples, 0.02%)</title><rect x="98.8880%" y="261" width="0.0225%" height="15" fill="rgb(250,156,29)" fg:x="35126" fg:w="8"/><text x="99.1380%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (19 samples, 0.05%)</title><rect x="98.9218%" y="245" width="0.0535%" height="15" fill="rgb(216,193,19)" fg:x="35138" fg:w="19"/><text x="99.1718%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (19 samples, 0.05%)</title><rect x="98.9218%" y="229" width="0.0535%" height="15" fill="rgb(216,135,14)" fg:x="35138" fg:w="19"/><text x="99.1718%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (19 samples, 0.05%)</title><rect x="98.9218%" y="213" width="0.0535%" height="15" fill="rgb(241,47,5)" fg:x="35138" fg:w="19"/><text x="99.1718%" y="223.50"></text></g><g><title>SkyLight`SLSFlushSurfaceWithOptionsAndIndex (21 samples, 0.06%)</title><rect x="98.9218%" y="261" width="0.0591%" height="15" fill="rgb(233,42,35)" fg:x="35138" fg:w="21"/><text x="99.1718%" y="271.50"></text></g><g><title>IOKit`iokit_user_client_trap (156 samples, 0.44%)</title><rect x="98.9809%" y="133" width="0.4392%" height="15" fill="rgb(231,13,6)" fg:x="35159" fg:w="156"/><text x="99.2309%" y="143.50"></text></g><g><title>Metal`-[_MTLCommandQueue submitCommandBuffer:] (157 samples, 0.44%)</title><rect x="98.9809%" y="245" width="0.4420%" height="15" fill="rgb(207,181,40)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="255.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (157 samples, 0.44%)</title><rect x="98.9809%" y="229" width="0.4420%" height="15" fill="rgb(254,173,49)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (157 samples, 0.44%)</title><rect x="98.9809%" y="213" width="0.4420%" height="15" fill="rgb(221,1,38)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="223.50"></text></g><g><title>Metal`__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (157 samples, 0.44%)</title><rect x="98.9809%" y="197" width="0.4420%" height="15" fill="rgb(206,124,46)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="207.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (157 samples, 0.44%)</title><rect x="98.9809%" y="181" width="0.4420%" height="15" fill="rgb(249,21,11)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="191.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (157 samples, 0.44%)</title><rect x="98.9809%" y="165" width="0.4420%" height="15" fill="rgb(222,201,40)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="175.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (157 samples, 0.44%)</title><rect x="98.9809%" y="149" width="0.4420%" height="15" fill="rgb(235,61,29)" fg:x="35159" fg:w="157"/><text x="99.2309%" y="159.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldPresentFramebufferData (183 samples, 0.52%)</title><rect x="98.9105%" y="277" width="0.5152%" height="15" fill="rgb(219,207,3)" fg:x="35134" fg:w="183"/><text x="99.1605%" y="287.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::flushContext (158 samples, 0.44%)</title><rect x="98.9809%" y="261" width="0.4448%" height="15" fill="rgb(222,56,46)" fg:x="35159" fg:w="158"/><text x="99.2309%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (18 samples, 0.05%)</title><rect x="99.4370%" y="229" width="0.0507%" height="15" fill="rgb(239,76,54)" fg:x="35321" fg:w="18"/><text x="99.6870%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (18 samples, 0.05%)</title><rect x="99.4370%" y="213" width="0.0507%" height="15" fill="rgb(231,124,27)" fg:x="35321" fg:w="18"/><text x="99.6870%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (18 samples, 0.05%)</title><rect x="99.4370%" y="197" width="0.0507%" height="15" fill="rgb(249,195,6)" fg:x="35321" fg:w="18"/><text x="99.6870%" y="207.50"></text></g><g><title>SkyLight`SLSGetSurfaceBinding (19 samples, 0.05%)</title><rect x="99.4370%" y="245" width="0.0535%" height="15" fill="rgb(237,174,47)" fg:x="35321" fg:w="19"/><text x="99.6870%" y="255.50"></text></g><g><title>QuartzCore`CAImageQueuePing_ (5 samples, 0.01%)</title><rect x="99.4933%" y="213" width="0.0141%" height="15" fill="rgb(206,201,31)" fg:x="35341" fg:w="5"/><text x="99.7433%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (5 samples, 0.01%)</title><rect x="99.4933%" y="197" width="0.0141%" height="15" fill="rgb(231,57,52)" fg:x="35341" fg:w="5"/><text x="99.7433%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (5 samples, 0.01%)</title><rect x="99.4933%" y="181" width="0.0141%" height="15" fill="rgb(248,177,22)" fg:x="35341" fg:w="5"/><text x="99.7433%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (5 samples, 0.01%)</title><rect x="99.4933%" y="165" width="0.0141%" height="15" fill="rgb(215,211,37)" fg:x="35341" fg:w="5"/><text x="99.7433%" y="175.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage (7 samples, 0.02%)</title><rect x="99.4933%" y="245" width="0.0197%" height="15" fill="rgb(241,128,51)" fg:x="35341" fg:w="7"/><text x="99.7433%" y="255.50"></text></g><g><title>QuartzCore`CAImageQueueInsertImage_ (7 samples, 0.02%)</title><rect x="99.4933%" y="229" width="0.0197%" height="15" fill="rgb(227,165,31)" fg:x="35341" fg:w="7"/><text x="99.7433%" y="239.50"></text></g><g><title>QuartzCore`release_image(_CAImageQueue*, unsigned long, CAImageQueueReleased*, bool) (15 samples, 0.04%)</title><rect x="99.5214%" y="229" width="0.0422%" height="15" fill="rgb(228,167,24)" fg:x="35351" fg:w="15"/><text x="99.7714%" y="239.50"></text></g><g><title>IOKit`iokit_user_client_trap (14 samples, 0.04%)</title><rect x="99.5242%" y="213" width="0.0394%" height="15" fill="rgb(228,143,12)" fg:x="35352" fg:w="14"/><text x="99.7742%" y="223.50"></text></g><g><title>QuartzCore`CAImageQueueCollect_ (20 samples, 0.06%)</title><rect x="99.5130%" y="245" width="0.0563%" height="15" fill="rgb(249,149,8)" fg:x="35348" fg:w="20"/><text x="99.7630%" y="255.50"></text></g><g><title>IOKit`IORegistryEntryGetRegistryEntryID (4 samples, 0.01%)</title><rect x="99.5693%" y="245" width="0.0113%" height="15" fill="rgb(243,35,44)" fg:x="35368" fg:w="4"/><text x="99.8193%" y="255.50"></text></g><g><title>IOKit`io_registry_entry_get_registry_entry_id (4 samples, 0.01%)</title><rect x="99.5693%" y="229" width="0.0113%" height="15" fill="rgb(246,89,9)" fg:x="35368" fg:w="4"/><text x="99.8193%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (4 samples, 0.01%)</title><rect x="99.5693%" y="213" width="0.0113%" height="15" fill="rgb(233,213,13)" fg:x="35368" fg:w="4"/><text x="99.8193%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (22 samples, 0.06%)</title><rect x="99.5946%" y="213" width="0.0619%" height="15" fill="rgb(233,141,41)" fg:x="35377" fg:w="22"/><text x="99.8446%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (22 samples, 0.06%)</title><rect x="99.5946%" y="197" width="0.0619%" height="15" fill="rgb(239,167,4)" fg:x="35377" fg:w="22"/><text x="99.8446%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (22 samples, 0.06%)</title><rect x="99.5946%" y="181" width="0.0619%" height="15" fill="rgb(209,217,16)" fg:x="35377" fg:w="22"/><text x="99.8446%" y="191.50"></text></g><g><title>AppKit`is_surface_opaque (23 samples, 0.06%)</title><rect x="99.5946%" y="245" width="0.0648%" height="15" fill="rgb(219,88,35)" fg:x="35377" fg:w="23"/><text x="99.8446%" y="255.50"></text></g><g><title>SkyLight`SLSGetSurfaceOpacity (23 samples, 0.06%)</title><rect x="99.5946%" y="229" width="0.0648%" height="15" fill="rgb(220,193,23)" fg:x="35377" fg:w="23"/><text x="99.8446%" y="239.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldBeginPrimitiveBuffer(GLDContextRec*, unsigned int, int*) (13 samples, 0.04%)</title><rect x="99.6678%" y="181" width="0.0366%" height="15" fill="rgb(230,90,52)" fg:x="35403" fg:w="13"/><text x="99.9178%" y="191.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::beginRenderPass (12 samples, 0.03%)</title><rect x="99.6706%" y="165" width="0.0338%" height="15" fill="rgb(252,106,19)" fg:x="35404" fg:w="12"/><text x="99.9206%" y="175.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (8 samples, 0.02%)</title><rect x="99.6819%" y="149" width="0.0225%" height="15" fill="rgb(206,74,20)" fg:x="35408" fg:w="8"/><text x="99.9319%" y="159.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXG15XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (6 samples, 0.02%)</title><rect x="99.6875%" y="133" width="0.0169%" height="15" fill="rgb(230,138,44)" fg:x="35410" fg:w="6"/><text x="99.9375%" y="143.50"></text></g><g><title>GLEngine`gleBeginPrimitiveTCLFunc (14 samples, 0.04%)</title><rect x="99.6678%" y="197" width="0.0394%" height="15" fill="rgb(235,182,43)" fg:x="35403" fg:w="14"/><text x="99.9178%" y="207.50"></text></g><g><title>GLEngine`gleDrawArraysOrElements_ExecCore (22 samples, 0.06%)</title><rect x="99.6678%" y="213" width="0.0619%" height="15" fill="rgb(242,16,51)" fg:x="35403" fg:w="22"/><text x="99.9178%" y="223.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldEndPrimitiveBuffer(GLDContextRec*, unsigned int, unsigned int, int) (8 samples, 0.02%)</title><rect x="99.7072%" y="197" width="0.0225%" height="15" fill="rgb(248,9,4)" fg:x="35417" fg:w="8"/><text x="99.9572%" y="207.50"></text></g><g><title>GLEngine`glDrawArrays_IMM_Exec (32 samples, 0.09%)</title><rect x="99.6678%" y="229" width="0.0901%" height="15" fill="rgb(210,31,22)" fg:x="35403" fg:w="32"/><text x="99.9178%" y="239.50"></text></g><g><title>GLEngine`gleDoDrawDispatchCore (10 samples, 0.03%)</title><rect x="99.7297%" y="213" width="0.0282%" height="15" fill="rgb(239,54,39)" fg:x="35425" fg:w="10"/><text x="99.9797%" y="223.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldUpdateDispatch (5 samples, 0.01%)</title><rect x="99.7438%" y="197" width="0.0141%" height="15" fill="rgb(230,99,41)" fg:x="35430" fg:w="5"/><text x="99.9938%" y="207.50"></text></g><g><title>IOKit`iokit_user_client_trap (60 samples, 0.17%)</title><rect x="99.7720%" y="101" width="0.1689%" height="15" fill="rgb(253,106,12)" fg:x="35440" fg:w="60"/><text x="100.0220%" y="111.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (61 samples, 0.17%)</title><rect x="99.7720%" y="133" width="0.1717%" height="15" fill="rgb(213,46,41)" fg:x="35440" fg:w="61"/><text x="100.0220%" y="143.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (61 samples, 0.17%)</title><rect x="99.7720%" y="117" width="0.1717%" height="15" fill="rgb(215,133,35)" fg:x="35440" fg:w="61"/><text x="100.0220%" y="127.50"></text></g><g><title>Metal`-[_MTLCommandQueue submitCommandBuffer:] (62 samples, 0.17%)</title><rect x="99.7720%" y="213" width="0.1745%" height="15" fill="rgb(213,28,5)" fg:x="35440" fg:w="62"/><text x="100.0220%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (62 samples, 0.17%)</title><rect x="99.7720%" y="197" width="0.1745%" height="15" fill="rgb(215,77,49)" fg:x="35440" fg:w="62"/><text x="100.0220%" y="207.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (62 samples, 0.17%)</title><rect x="99.7720%" y="181" width="0.1745%" height="15" fill="rgb(248,100,22)" fg:x="35440" fg:w="62"/><text x="100.0220%" y="191.50"></text></g><g><title>Metal`__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (62 samples, 0.17%)</title><rect x="99.7720%" y="165" width="0.1745%" height="15" fill="rgb(208,67,9)" fg:x="35440" fg:w="62"/><text x="100.0220%" y="175.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (62 samples, 0.17%)</title><rect x="99.7720%" y="149" width="0.1745%" height="15" fill="rgb(219,133,21)" fg:x="35440" fg:w="62"/><text x="100.0220%" y="159.50"></text></g><g><title>AppKit`-[NSCGLSurface flushRect:] (183 samples, 0.52%)</title><rect x="99.4341%" y="261" width="0.5152%" height="15" fill="rgb(246,46,29)" fg:x="35320" fg:w="183"/><text x="99.6841%" y="271.50"></text></g><g><title>AppKit`-[NSIOAccelSurface frontBuffer] (102 samples, 0.29%)</title><rect x="99.6622%" y="245" width="0.2872%" height="15" fill="rgb(246,185,52)" fg:x="35401" fg:w="102"/><text x="99.9122%" y="255.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::flushContext (64 samples, 0.18%)</title><rect x="99.7692%" y="229" width="0.1802%" height="15" fill="rgb(252,136,11)" fg:x="35439" fg:w="64"/><text x="100.0192%" y="239.50"></text></g><g><title>AppKit`NSCGLSurfaceFlush (188 samples, 0.53%)</title><rect x="99.4257%" y="277" width="0.5293%" height="15" fill="rgb(219,138,53)" fg:x="35317" fg:w="188"/><text x="99.6757%" y="287.50"></text></g><g><title>libSDL2-2.0.0.dylib`Cocoa_GL_SwapWindow (372 samples, 1.05%)</title><rect x="98.9105%" y="341" width="1.0473%" height="15" fill="rgb(211,51,23)" fg:x="35134" fg:w="372"/><text x="99.1605%" y="351.50"></text></g><g><title>AppKit`-[NSOpenGLContext flushBuffer] (372 samples, 1.05%)</title><rect x="98.9105%" y="325" width="1.0473%" height="15" fill="rgb(247,221,28)" fg:x="35134" fg:w="372"/><text x="99.1605%" y="335.50"></text></g><g><title>OpenGL`CGLFlushDrawable (372 samples, 1.05%)</title><rect x="98.9105%" y="309" width="1.0473%" height="15" fill="rgb(251,222,45)" fg:x="35134" fg:w="372"/><text x="99.1605%" y="319.50"></text></g><g><title>GLEngine`glSwap_Exec (372 samples, 1.05%)</title><rect x="98.9105%" y="293" width="1.0473%" height="15" fill="rgb(217,162,53)" fg:x="35134" fg:w="372"/><text x="99.1605%" y="303.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::getCommandBuffer (4 samples, 0.01%)</title><rect x="99.9662%" y="309" width="0.0113%" height="15" fill="rgb(229,93,14)" fg:x="35509" fg:w="4"/><text x="100.2162%" y="319.50"></text></g><g><title>GLEngine`glClear_Exec (9 samples, 0.03%)</title><rect x="99.9662%" y="341" width="0.0253%" height="15" fill="rgb(209,67,49)" fg:x="35509" fg:w="9"/><text x="100.2162%" y="351.50"></text></g><g><title>AppleMetalOpenGLRenderer`gldClearFramebufferData (9 samples, 0.03%)</title><rect x="99.9662%" y="325" width="0.0253%" height="15" fill="rgb(213,87,29)" fg:x="35509" fg:w="9"/><text x="100.2162%" y="335.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLDContextRec::addRenderPassResources (5 samples, 0.01%)</title><rect x="99.9775%" y="309" width="0.0141%" height="15" fill="rgb(205,151,52)" fg:x="35513" fg:w="5"/><text x="100.2275%" y="319.50"></text></g><g><title>AppleMetalOpenGLRenderer`GLRTextureResource::getGLViewResource (5 samples, 0.01%)</title><rect x="99.9775%" y="293" width="0.0141%" height="15" fill="rgb(253,215,39)" fg:x="35513" fg:w="5"/><text x="100.2275%" y="303.50"></text></g><g><title>AppleMetalOpenGLRenderer`makeTextureViewRscIfNeeded(GLRTextureResource*, MTLPixelFormat, MTLTextureType, _NSRange, _NSRange, unsigned int) (5 samples, 0.01%)</title><rect x="99.9775%" y="277" width="0.0141%" height="15" fill="rgb(221,220,41)" fg:x="35513" fg:w="5"/><text x="100.2275%" y="287.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXTexture newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:] (4 samples, 0.01%)</title><rect x="99.9803%" y="261" width="0.0113%" height="15" fill="rgb(218,133,21)" fg:x="35514" fg:w="4"/><text x="100.2303%" y="271.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXTexture initWithTexture:pixelFormat:textureType:levels:slices:swizzle:] (4 samples, 0.01%)</title><rect x="99.9803%" y="245" width="0.0113%" height="15" fill="rgb(221,193,43)" fg:x="35514" fg:w="4"/><text x="100.2303%" y="255.50"></text></g><g><title>AGXMetalG15X_B0`-[AGXTexture initWithTexture:pixelFormat:textureType:levels:slices:swizzle:resourceIndex:] (4 samples, 0.01%)</title><rect x="99.9803%" y="229" width="0.0113%" height="15" fill="rgb(240,128,52)" fg:x="35514" fg:w="4"/><text x="100.2303%" y="239.50"></text></g><g><title>nand2tetris`main (35,328 samples, 99.46%)</title><rect x="0.5405%" y="437" width="99.4567%" height="15" fill="rgb(253,114,12)" fg:x="192" fg:w="35328"/><text x="0.7905%" y="447.50">nand2tetris`main</text></g><g><title>nand2tetris`std::rt::lang_start_internal (35,328 samples, 99.46%)</title><rect x="0.5405%" y="421" width="99.4567%" height="15" fill="rgb(215,223,47)" fg:x="192" fg:w="35328"/><text x="0.7905%" y="431.50">nand2tetris`std::rt::lang_start_internal</text></g><g><title>nand2tetris`std::rt::lang_start::_{{closure}} (35,328 samples, 99.46%)</title><rect x="0.5405%" y="405" width="99.4567%" height="15" fill="rgb(248,225,23)" fg:x="192" fg:w="35328"/><text x="0.7905%" y="415.50">nand2tetris`std::rt::lang_start::_{{closure}}</text></g><g><title>nand2tetris`std::sys_common::backtrace::__rust_begin_short_backtrace (35,328 samples, 99.46%)</title><rect x="0.5405%" y="389" width="99.4567%" height="15" fill="rgb(250,108,0)" fg:x="192" fg:w="35328"/><text x="0.7905%" y="399.50">nand2tetris`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nand2tetris`nand2tetris::main (35,328 samples, 99.46%)</title><rect x="0.5405%" y="373" width="99.4567%" height="15" fill="rgb(228,208,7)" fg:x="192" fg:w="35328"/><text x="0.7905%" y="383.50">nand2tetris`nand2tetris::main</text></g><g><title>nand2tetris`engine::run (35,168 samples, 99.01%)</title><rect x="0.9910%" y="357" width="99.0062%" height="15" fill="rgb(244,45,10)" fg:x="352" fg:w="35168"/><text x="1.2410%" y="367.50">nand2tetris`engine::run</text></g><g><title>all (35,521 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="35521"/><text x="0.2500%" y="479.50"></text></g><g><title>dyld`start (35,329 samples, 99.46%)</title><rect x="0.5405%" y="453" width="99.4595%" height="15" fill="rgb(210,195,18)" fg:x="192" fg:w="35329"/><text x="0.7905%" y="463.50">dyld`start</text></g></svg></svg>